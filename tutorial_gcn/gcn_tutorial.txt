âžœ  ~ python3
Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 05:52:31)
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import numpy as np
>>> A = np.matrix([
...     [0, 1, 0, 0],
...     [0, 0, 1, 1],
...     [0, 1, 0, 0],
...     [1, 0, 1, 0]],
...     dtype=float
... )
>>> D = np.array(np.sum(A, axis=0))[0]
>>> D = np.matrix(np.diag(D))
>>> D
matrix([[1., 0., 0., 0.],
        [0., 2., 0., 0.],
        [0., 0., 2., 0.],
        [0., 0., 0., 1.]])
>>> A
matrix([[0., 1., 0., 0.],
        [0., 0., 1., 1.],
        [0., 1., 0., 0.],
        [1., 0., 1., 0.]])
>>> D**-1 * A
matrix([[0. , 1. , 0. , 0. ],
        [0. , 0. , 0.5, 0.5],
        [0. , 0.5, 0. , 0. ],
        [1. , 0. , 1. , 0. ]])
>>> X = np.matrix([
...             [i, -i]
...             for i in range(A.shape[0])
...         ], dtype=float)
>>> D**-1 * A * X
matrix([[ 1. , -1. ],
        [ 2.5, -2.5],
        [ 0.5, -0.5],
        [ 2. , -2. ]])
>>> W = np.matrix([
...              [1, -1],
...              [-1, 1]
...          ])
>>> I = np.matrix(np.eye(A.shape[0]))
>>> I
matrix([[1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.]])
>>> D_hat = np.array(np.sum(A+I, axis=0))[0]
>>> D_hat = np.matrix(np.diag(D_hat))
>>> D_hat**-1 * A_hat * X * W
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'A_hat' is not defined
>>> A_hat = A+I
>>> D_hat**-1 * A_hat * X * W
matrix([[ 1., -1.],
        [ 4., -4.],
        [ 2., -2.],
        [ 5., -5.]])
>>> D_hat**-1
matrix([[0.5       , 0.        , 0.        , 0.        ],
        [0.        , 0.33333333, 0.        , 0.        ],
        [0.        , 0.        , 0.33333333, 0.        ],
        [0.        , 0.        , 0.        , 0.5       ]])
>>> W = np.matrix([
...              [1],
...              [-1]
...          ])
>>> D_hat**-1 * A_hat * X * W
matrix([[1.],
        [4.],
        [2.],
        [5.]])
>>> W = np.matrix([
...              [1, -1],
...              [-1, 1]
...          ])
>>> D_hat**-1 * A_hat * X * W
matrix([[ 1., -1.],
        [ 4., -4.],
        [ 2., -2.],
        [ 5., -5.]])
>>> D_hat**-1 * A_hat * X
matrix([[ 0.5, -0.5],
        [ 2. , -2. ],
        [ 1. , -1. ],
        [ 2.5, -2.5]])
>>> relu
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'relu' is not defined
>>> np.maximum(D_hat**-1 * A_hat * X * W, 0)
matrix([[1., 0.],
        [4., 0.],
        [2., 0.],
        [5., 0.]])
>>>